// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/utils/math/SafeMath.sol";

contract MyToken {
    using SafeMath for uint256;

    struct VestingSchedule {
        uint256 totalBalance;   // Total tokens vested
        uint256 startTime;      // Vesting start time (usually TGE)
        uint256 released;       // Tokens already released
    }

    mapping(address => uint256) public balanceOf;
    mapping(address => VestingSchedule) public vestingSchedules;

    uint256 public immutable totalSupply;
    uint256 public immutable issuanceDate;
    uint256 public immutable cliffDuration;
    uint256 public immutable vestingDuration;
    uint256 public immutable tgePercentage;

    event TokensReleased(address indexed beneficiary, uint256 amount);

    constructor(
        uint256 _totalSupply,
        uint256 _issuanceDate,
        uint256 _cliffDuration,
        uint256 _vestingDuration,
        uint256 _tgePercentage
    ) {
        require(_tgePercentage <= 100, "TGE percentage cannot exceed 100");
        totalSupply = _totalSupply;
        issuanceDate = _issuanceDate;
        cliffDuration = _cliffDuration;
        vestingDuration = _vestingDuration;
        tgePercentage = _tgePercentage;

        balanceOf[msg.sender] = totalSupply;

        // Initialize vesting schedule for the deployer (usually the team or foundation)
        vestingSchedules[msg.sender] = VestingSchedule(totalSupply, block.timestamp, 0);
    }

    modifier onlyBeneficiary() {
        require(vestingSchedules[msg.sender].startTime > 0, "No vesting schedule for this address");
        _;
    }

    function releaseTokens() external onlyBeneficiary {
        VestingSchedule storage vesting = vestingSchedules[msg.sender];
        uint256 available = calculateAvailableTokens(msg.sender);
        require(available > 0, "No tokens available for withdrawal yet");

        vesting.released = vesting.released.add(available);
        balanceOf[msg.sender] = balanceOf[msg.sender].add(available);

        emit TokensReleased(msg.sender, available);
    }

    function calculateAvailableTokens(address beneficiary) public view returns (uint256) {
        VestingSchedule storage vesting = vestingSchedules[beneficiary];

        uint256 elapsedTime = block.timestamp.sub(vesting.startTime);

        if (elapsedTime < cliffDuration) {
            return 0;
        }

        uint256 totalVestedAmount = (vesting.totalBalance.mul(tgePercentage)).div(100);
        uint256 vestedMonths = elapsedTime.sub(cliffDuration).div(30 days);
        uint256 additionalVestedAmount = ((vesting.totalBalance.sub(totalVestedAmount)).mul(vestedMonths).mul(10)).div(100);

        uint256 vestedTokens = totalVestedAmount.add(additionalVestedAmount);

        return vestedTokens.sub(vesting.released); // Subtract already released tokens
    }

    function addVestingSchedule(address beneficiary, uint256 amount) external {
        require(balanceOf[msg.sender] >= amount, "Insufficient balance to vest");
        require(vestingSchedules[beneficiary].startTime == 0, "Vesting schedule already exists");

        balanceOf[msg.sender] = balanceOf[msg.sender].sub(amount);
        vestingSchedules[beneficiary] = VestingSchedule(amount, block.timestamp, 0);
    }
}Vesting schedule not initialized");

        uint256 available = calculateAvailableTokens(beneficiary);
        require(available > 0, "No tokens available for withdrawal yet");

        vesting.totalBalance -= available;
        balanceOf[beneficiary] += available;

        emit TokensReleased(beneficiary, available);
    }

    function calculateAvailableTokens(address beneficiary) internal view returns (uint256) {
        VestingSchedule storage vesting = vestingSchedules[beneficiary];
        uint256 elapsedTime = block.timestamp - vesting.startTime;

        if (elapsedTime < cliffDuration) {
            return 0;
        } else {
            uint256 vestedTokens = (vesting.totalBalance * tgePercentage) / 100;
            uint256 vestedMonths = (elapsedTime - cliffDuration) / vestingDuration;
            uint256 linearVestingTokens = ((vesting.totalBalance - vestedTokens) * vestedMonths * 10) / 100;

            return vestedTokens + linearVestingTokens;
        }
    }
}
